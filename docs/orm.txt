ORM => Object Related Model

we use it to get data from database

exmaple model = Article

!Article.objects.
  - all() = to take all data model
  - order_by('title') = to take data sorted/ordered by title
  - reverse() = to reverse the original data
  - get(pk=1) to take object with has id/pk equal 1
  - values = used to query the database and returns a list of dictionaries, where the keys are the field names of the model and the values are the corresponding values from the database.
    * Article.objects.values('id', 'title').all() => [{'id': 1, title: 'Test'}, ...]

    if we have:
        - primary model: Category
        - secondary model/related model: Article
    we can get all Article models related with Category:
      - category = Category.objects.get(pk=1)
      - category.article_set.all()

      or use it with related_name var which you add to the category = models.ForeignKey()
        - category.[related_name].all()

    if we know only category title, and we want to have all articles by category:
    Article.objects.filter(category__[field]="[Title]")

  with filters:
    to use some filters/lookups you need to write [fieldName]__[filter]
    read more at https://docs.djangoproject.com/en/5.1/ref/models/querysets/#field-lookups
    - gt = Greater than
      * id__gt=4 = (gt = Greeter than) id which more than 4
    - gte = Greater than or equal to
      * id__gt=4 = (gt = Greeter than) id which more or equal 4
    - lt = less than
    - lte = less than or equal to
    - startswith = return objects with startswith (title)
    - contains = return (title) with container (some string) with register
    - icontains = return (title) with container (some string) w/0 register
    - in=(1, 5, 6) = return if (id) return all objects if the pk maths with the values in a list
      * in param we can also use a Querysets as:
        - categories = Category.objects.filter(pk__in=[1,2])
        - articles = Article.objects.filter(category__in=cats)
    - range=(1, 10) = return all elements from (pk) 1 to 10
    - exact=5 return objects with (id) 5
    - iexact = with register
    - first = to get first element from a model list
    - last = to get last element from a model list
    - earliest = return most eary element by datetime field
    - latest = return most late element by datetime field
    - exists = return if some value exists
    - count = return length of
    - get_previous_by_[datetime field] = return prev object
    - get_next_by_[datetime field] = return next object
    - distinct = return only uniq objetcs [1, 1, 1, 2, 2] => [1, 2]

Q = In Django, Q is an object provided by django.db.models that allows you to build complex database queries using logical expressions like "OR = |", "AND = &", and "NOT = ~".
F = In Django, the F class is used to reference the value of a field on a model instance directly in database queries. This is especially useful for performing database-level operations, such as comparisons, updates, or expressions, without needing to fetch the object into memory.

example
Article.objects.filter(Q(pk__in=[1, 5]) | Q(title__contains="test")) = it returns elemens where id equal 1, 5 and title with test => [1, 5, 'test']

Aggregate functions
    # in Django are used to perform calculations on groups of data, such as counting records, calculating sums, averages, minimums, maximums, and more
    # existed Aggregate: (Min, Max, Sum, Avg, Count) detailed at: https://docs.djangoproject.com/en/5.1/topics/db/aggregation/
    # you can also use diff to get differences beetwen
    - diff=Max('views') - Min('views')
    - Article.objects.aggregate(min_views=Min('views'), max_views=Max('views')) => {min_views: 0, max_views: 100}


Annotate:

    # In Django, annotate is a computed propery ORM method that allows you to add calculated fields (aggregated or non-aggregated) to each object in a QuerySet. This is useful for attaching additional data to each record in a query.
    - categories = Category.objects.annotate(cnt=Count('product'))
        for item in categories: item.cnt


